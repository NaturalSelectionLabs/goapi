// Code generated by "enumer -type=Method -values"; DO NOT EDIT.

package openapi

import (
	"fmt"
	"strings"
)

const _MethodName = "GETPOSTPUTDELETEPATCHHEADOPTIONSTRACE"

var _MethodIndex = [...]uint8{0, 3, 7, 10, 16, 21, 25, 32, 37}

const _MethodLowerName = "getpostputdeletepatchheadoptionstrace"

func (i Method) String() string {
	if i < 0 || i >= Method(len(_MethodIndex)-1) {
		return fmt.Sprintf("Method(%d)", i)
	}
	return _MethodName[_MethodIndex[i]:_MethodIndex[i+1]]
}

func (Method) Values() []string {
	return MethodStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MethodNoOp() {
	var x [1]struct{}
	_ = x[GET-(0)]
	_ = x[POST-(1)]
	_ = x[PUT-(2)]
	_ = x[DELETE-(3)]
	_ = x[PATCH-(4)]
	_ = x[HEAD-(5)]
	_ = x[OPTIONS-(6)]
	_ = x[TRACE-(7)]
}

var _MethodValues = []Method{GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS, TRACE}

var _MethodNameToValueMap = map[string]Method{
	_MethodName[0:3]:        GET,
	_MethodLowerName[0:3]:   GET,
	_MethodName[3:7]:        POST,
	_MethodLowerName[3:7]:   POST,
	_MethodName[7:10]:       PUT,
	_MethodLowerName[7:10]:  PUT,
	_MethodName[10:16]:      DELETE,
	_MethodLowerName[10:16]: DELETE,
	_MethodName[16:21]:      PATCH,
	_MethodLowerName[16:21]: PATCH,
	_MethodName[21:25]:      HEAD,
	_MethodLowerName[21:25]: HEAD,
	_MethodName[25:32]:      OPTIONS,
	_MethodLowerName[25:32]: OPTIONS,
	_MethodName[32:37]:      TRACE,
	_MethodLowerName[32:37]: TRACE,
}

var _MethodNames = []string{
	_MethodName[0:3],
	_MethodName[3:7],
	_MethodName[7:10],
	_MethodName[10:16],
	_MethodName[16:21],
	_MethodName[21:25],
	_MethodName[25:32],
	_MethodName[32:37],
}

// MethodString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MethodString(s string) (Method, error) {
	if val, ok := _MethodNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MethodNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Method values", s)
}

// MethodValues returns all values of the enum
func MethodValues() []Method {
	return _MethodValues
}

// MethodStrings returns a slice of all String values of the enum
func MethodStrings() []string {
	strs := make([]string, len(_MethodNames))
	copy(strs, _MethodNames)
	return strs
}

// IsAMethod returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Method) IsAMethod() bool {
	for _, v := range _MethodValues {
		if i == v {
			return true
		}
	}
	return false
}
