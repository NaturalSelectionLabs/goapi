// Code generated by "enumer -type=ParamIn -values -transform=lower -json"; DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ParamInName = "pathqueryheader"

var _ParamInIndex = [...]uint8{0, 4, 9, 15}

const _ParamInLowerName = "pathqueryheader"

func (i ParamIn) String() string {
	if i < 0 || i >= ParamIn(len(_ParamInIndex)-1) {
		return fmt.Sprintf("ParamIn(%d)", i)
	}
	return _ParamInName[_ParamInIndex[i]:_ParamInIndex[i+1]]
}

func (ParamIn) Values() []string {
	return ParamInStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ParamInNoOp() {
	var x [1]struct{}
	_ = x[PATH-(0)]
	_ = x[QUERY-(1)]
	_ = x[HEADER-(2)]
}

var _ParamInValues = []ParamIn{PATH, QUERY, HEADER}

var _ParamInNameToValueMap = map[string]ParamIn{
	_ParamInName[0:4]:       PATH,
	_ParamInLowerName[0:4]:  PATH,
	_ParamInName[4:9]:       QUERY,
	_ParamInLowerName[4:9]:  QUERY,
	_ParamInName[9:15]:      HEADER,
	_ParamInLowerName[9:15]: HEADER,
}

var _ParamInNames = []string{
	_ParamInName[0:4],
	_ParamInName[4:9],
	_ParamInName[9:15],
}

// ParamInString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ParamInString(s string) (ParamIn, error) {
	if val, ok := _ParamInNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ParamInNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ParamIn values", s)
}

// ParamInValues returns all values of the enum
func ParamInValues() []ParamIn {
	return _ParamInValues
}

// ParamInStrings returns a slice of all String values of the enum
func ParamInStrings() []string {
	strs := make([]string, len(_ParamInNames))
	copy(strs, _ParamInNames)
	return strs
}

// IsAParamIn returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ParamIn) IsAParamIn() bool {
	for _, v := range _ParamInValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ParamIn
func (i ParamIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ParamIn
func (i *ParamIn) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ParamIn should be a string, got %s", data)
	}

	var err error
	*i, err = ParamInString(s)
	return err
}
