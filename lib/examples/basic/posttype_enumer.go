// Code generated by "enumer -type=PostType -trimprefix=PostType -transform=lower -json -values"; DO NOT EDIT.

package main

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _PostTypeName = "allgamemusic"

var _PostTypeIndex = [...]uint8{0, 3, 7, 12}

const _PostTypeLowerName = "allgamemusic"

func (i PostType) String() string {
	if i < 0 || i >= PostType(len(_PostTypeIndex)-1) {
		return fmt.Sprintf("PostType(%d)", i)
	}
	return _PostTypeName[_PostTypeIndex[i]:_PostTypeIndex[i+1]]
}

func (PostType) Values() []string {
	return PostTypeStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PostTypeNoOp() {
	var x [1]struct{}
	_ = x[PostTypeAll-(0)]
	_ = x[PostTypeGame-(1)]
	_ = x[PostTypeMusic-(2)]
}

var _PostTypeValues = []PostType{PostTypeAll, PostTypeGame, PostTypeMusic}

var _PostTypeNameToValueMap = map[string]PostType{
	_PostTypeName[0:3]:       PostTypeAll,
	_PostTypeLowerName[0:3]:  PostTypeAll,
	_PostTypeName[3:7]:       PostTypeGame,
	_PostTypeLowerName[3:7]:  PostTypeGame,
	_PostTypeName[7:12]:      PostTypeMusic,
	_PostTypeLowerName[7:12]: PostTypeMusic,
}

var _PostTypeNames = []string{
	_PostTypeName[0:3],
	_PostTypeName[3:7],
	_PostTypeName[7:12],
}

// PostTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PostTypeString(s string) (PostType, error) {
	if val, ok := _PostTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PostTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PostType values", s)
}

// PostTypeValues returns all values of the enum
func PostTypeValues() []PostType {
	return _PostTypeValues
}

// PostTypeStrings returns a slice of all String values of the enum
func PostTypeStrings() []string {
	strs := make([]string, len(_PostTypeNames))
	copy(strs, _PostTypeNames)
	return strs
}

// IsAPostType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PostType) IsAPostType() bool {
	for _, v := range _PostTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PostType
func (i PostType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PostType
func (i *PostType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PostType should be a string, got %s", data)
	}

	var err error
	*i, err = PostTypeString(s)
	return err
}
